///////////////////////////////////////
import * as model from "./model.js";
import { MODAL_CLOSE_SEC } from "./config.js";
import recipeView from "./views/recipeView.js";
import searchView from "./views/searchView.js";
import resultsView from "./views/resultsView.js";
import bookmarksView from "./views/bookmarksView.js";
import addRecipeView from "./views/addRecipeView.js";
import paginationView from "./views/paginationView.js";

import "core-js/stable";
import "regenerator-runtime/runtime";
import { async } from "regenerator-runtime";
///////////////////////////////////////
// HMR (Hot Module Replacement) trong webpack
// ho·∫∑c m·ªôt tr√¨nh bi√™n d·ªãch JavaScript kh√°c (nh∆∞ babel-loader).
// ƒêo·∫°n m√£ n√†y ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ ki·ªÉm tra xem c√≥ h·ªó tr·ª£ HMR kh√¥ng, v√† n·∫øu c√≥, n√≥ s·∫Ω
// ch·∫•p nh·∫≠n c√°c s·ª± thay ƒë·ªïi trong m√£ ngu·ªìn m√† kh√¥ng c·∫ßn ph·∫£i l√†m t·∫£i l·∫°i tr√¨nh duy·ªát.
if (module.hot) {
  module.hot.accept();
}
// if (module.hot): ƒêi·ªÅu n√†y ki·ªÉm tra xem module
// hi·ªán t·∫°i c√≥ h·ªó tr·ª£ HMR kh√¥ng. N·∫øu c√≥, module.hot
// s·∫Ω c√≥ gi√° tr·ªã true, v√† ƒëi·ªÅu ki·ªán n√†y s·∫Ω ƒë√∫ng.

// module.hot.accept(): ƒêo·∫°n m√£ n√†y ƒë∆∞·ª£c g·ªçi khi module
// ƒë∆∞·ª£c ch·∫•p nh·∫≠n ƒë·ªÉ ch·∫•p nh·∫≠n c√°c s·ª± thay ƒë·ªïi. Khi b·∫°n th·ª±c hi·ªán
// m·ªôt s·ª± thay ƒë·ªïi trong m√£ ngu·ªìn v√† l∆∞u l·∫°i, HMR s·∫Ω c·ªë g·∫Øng √°p d·ª•ng
// c√°c thay ƒë·ªïi n√†y m√† kh√¥ng c·∫ßn ph·∫£i t·∫£i l·∫°i tr√¨nh duy·ªát. Khi s·ª± thay ƒë·ªïi
// ƒë∆∞·ª£c ch·∫•p nh·∫≠n, webpack s·∫Ω thay th·∫ø module c≈© b·∫±ng module m·ªõi v√† c·∫≠p nh·∫≠t
// giao di·ªán ng∆∞·ªùi d√πng m√† kh√¥ng l√†m t·∫£i l·∫°i to√†n b·ªô trang web.
///////////////////////////////////////
const controlRecipes = async function () {
  try {
    const id = window.location.hash.slice(1);

    if (!id) return;
    recipeView.renderSpinner();

    // 0) Update res view to mark selected search res
    resultsView.update(model.getSearchResultsPage());
    // 1) Updating bookmarks view
    // debugger;
    bookmarksView.update(model.state.bookmarks);

    // 2) Loading recipe
    await model.loadRecipe(id);

    // 3) Rendering recipe
    recipeView.render(model.state.recipe);
  } catch (err) {
    console.log(err);
    recipeView.renderError();
  }
};

const controlSearchResults = async function () {
  try {
    resultsView.renderSpinner();
    // 1) Get query search
    const query = searchView.getQuery();
    if (!query) return;

    // 2) Load search results
    await model.loadSearchResult(query);

    // 3) Render results
    // resultsView.render(model.state.search.results);
    resultsView.render(model.getSearchResultsPage());

    // 4) Render initial pagination button
    paginationView.render(model.state.search);
  } catch (err) {
    console.log(err);
  }
};

// +

const controlPagination = function (goToPage) {
  // 1) Render NEW results
  resultsView.render(model.getSearchResultsPage(goToPage));

  // 2) Render NEW pagination button
  paginationView.render(model.state.search);
};

const controlServings = function (newServings) {
  // Update servings
  model.updateServings(newServings);

  // Udapte the recipe view
  // recipeView.render(model.state.recipe);
  recipeView.update(model.state.recipe);
};

const controlAddBookMark = function () {
  // 1) Add or remove bookmark
  if (!model.state.recipe.bookmarked) model.addBookMark(model.state.recipe);
  else model.deleteBookMark(model.state.recipe.id);

  // 2) Update recipeView when user click btn bookmark
  recipeView.update(model.state.recipe);

  // 3) Render bookmarks
  bookmarksView.render(model.state.bookmarks);
};

const controlBookmarks = function () {
  bookmarksView.render(model.state.bookmarks);
};

const controlAddRecipe = async function (newRecipe) {
  try {
    // Show loading Spiner
    addRecipeView.renderSpinner();

    // Upload the new recipe data
    await model.uploadRecipe(newRecipe);
    console.log(model.state.recipe);

    // Render Recipe
    recipeView.render(model.state.recipe);

    // Render bookmakr view
    bookmarksView.render(model.state.bookmarks);

    // Change ID in URL
    window.history.pushState(null, "", `#${model.state.recipe.id}`);

    // Close form window
    setTimeout(function () {
      addRecipeView.toggleWindow();
    }, MODAL_CLOSE_SEC * 1000);

    // Display Succes Message
    addRecipeView.renderMessage();
  } catch (err) {
    console.error("üí•", err);
    addRecipeView.renderError(err.message);
  }
};

const newFeature = function () {
  console.log("Welcome to the application");
};
const init = function () {
  bookmarksView.addHandlerRender(controlBookmarks);
  recipeView.addHandlerRender(controlRecipes);
  recipeView.addHandlerUpdateServings(controlServings);
  recipeView.addHandlerAddMarkBook(controlAddBookMark);
  searchView.addHandlerSearch(controlSearchResults);
  paginationView.addHandlerClick(controlPagination);
  addRecipeView._addHandlerUpload(controlAddRecipe);
  newFeature();
};
init();
